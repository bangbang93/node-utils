// array.test.ts - Generated by CodiumAI

/*
 Code Analysis:
 - - The main goal of the function is to sort an array of objects based on a specified order key.
 - The function takes in an array of objects and an order key as inputs.
 - The order key is an object that specifies the sorting order for each property of the objects in the array.
 - The function uses the generateSortFunction helper function to generate a sorting function based on the order key.
 - The sorting function is then used to sort the array of objects using the sort method.
 - The sorted array is returned as the output of the function.
 - If the input array is empty or null, the function returns an empty array.
 - If the input order key is empty or null, the function returns the input array without sorting it.
 */


import {arraySort, generateSortFunction} from './array'

describe('arraySort_function', () => {
  test('test_nonEmptyArraySort: 非空数组排序', () => {
    const arr = [{name: 'John', age: 30}, {name: 'Jane', age: 25}, {name: 'Bob', age: 35}]
    const orderKey = {age: '+number'} as const
    const expected = [{name: 'Jane', age: 25}, {name: 'John', age: 30}, {name: 'Bob', age: 35}]
    expect(arraySort(arr, orderKey)).toEqual(expected)
  })
  test('test_validOrderKeySort: 根据有效排序键正确排序数组', () => {
    const arr = [{name: 'John', age: 30}, {name: 'Jane', age: 25}, {name: 'Bob', age: 35}]
    const orderKey = {name: '+string', age: '-number'} as const
    const expected = [{name: 'Bob', age: 35}, {name: 'Jane', age: 25}, {name: 'John', age: 30}]
    expect(arraySort(arr, orderKey)).toEqual(expected)
  })
  test('test_emptyArraySort: 空数组排序', () => {
    const arr = []
    const orderKey = {name: '+string'} as const
    const expected = []
    expect(arraySort(arr, orderKey)).toEqual(expected)
  })
  test('test_noModificationSort: 不修改原数组', () => {
    const arr = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Charlie', age: 20}]
    const orderKey = {name: '+number'} as const
    arraySort(arr, orderKey)
    const expected = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Charlie', age: 20}]
    expect(arr).toEqual(expected)
  })
  test('test_emptyOrderKeySort: 空排序键排序', () => {
    const arr = [{name: 'John', age: 30}, {name: 'Jane', age: 25}, {name: 'Bob', age: 35}]
    const orderKey = {}
    const expected = [{name: 'John', age: 30}, {name: 'Jane', age: 25}, {name: 'Bob', age: 35}]
    expect(arraySort(arr, orderKey)).toEqual(expected)
  })
  test('test_invalidPropertySort: 无效属性排序', () => {
    const arr = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Charlie', age: 20}]
    const orderKey = {gender: '+string'} as const
    const expected = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Charlie', age: 20}]
    expect(arraySort(arr, orderKey)).toEqual(expected)
  })
  test('test_nonNumericValueSort: 非数字值排序', () => {
    const arr = [{name: 'Alice', age: '25'}, {name: 'Bob', age: '30'}, {name: 'Charlie', age: '20'}]
    const orderKey = {age: '+number'} as const
    const expected = [{name: 'Charlie', age: '20'}, {name: 'Alice', age: '25'}, {name: 'Bob', age: '30'}]
    expect(arraySort(arr, orderKey)).toEqual(expected)
  })
})

describe('generateSortFunction_function', () => {
  test('test_validOrderKey', () => {
    const orderKey = {
      name: '+string',
      age: '-number',
    } as const
    const sortFunction = generateSortFunction(orderKey)
    expect(typeof sortFunction)
      .toBe('function')
  })
  test('test_validArray', () => {
    const arr = [
      {name: 'John', age: 30},
      {name: 'Jane', age: 25},
      {name: 'Bob', age: 40},
    ]
    const orderKey = {
      name: '+string',
      age: '-number',
    } as const
    const sortedArr = arraySort(arr, orderKey)
    expect(sortedArr)
      .toEqual([
        {name: 'Bob', age: 40},
        {name: 'Jane', age: 25},
        {name: 'John', age: 30},
      ])
  })
  test('test_sortingFunctionReturnsNumber', () => {
    const orderKey = {
      name: '+string',
      age: '-number',
    } as const
    const sortFunction = generateSortFunction(orderKey)
    const result = sortFunction({name: 'John', age: 30}, {name: 'Jane', age: 25})
    expect(typeof result)
      .toBe('number')
  })
  test('test_missingKeys', () => {
    const arr = [
      {name: 'John', age: 30},
      {name: 'Jane', age: 25},
      {name: 'Bob', age: 40},
    ]
    const orderKey = {name: '+string', height: '-number'} as const
    const sortedArr = arraySort(arr, orderKey)
    expect(sortedArr).toEqual(arr)
  })
  test('test_sortingFunctionCorrectlySorts', () => {
    const arr = [
      {name: 'John', age: 30},
      {name: 'Jane', age: 25},
      {name: 'Bob', age: 40},
    ]
    const orderKey = {name: '+string', age: '-number'} as const
    const sortedArr = arraySort(arr, orderKey)
    expect(sortedArr).toEqual([
      {name: 'Bob', age: 40},
      {name: 'Jane', age: 25},
      {name: 'John', age: 30},
    ])
  })
})
